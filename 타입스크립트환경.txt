npm i -D parcel typescript (개발 의존성 패키지)

"scripts" 이하
package.json의

진입점 
test -> dev : "parcel ./index.html
"build" : "parcel build ./index.html"
"main":"index.js" 현재 프로젝트에서는 필요하지 않으므로 제거

타입스크립트는 html에서 실행되지 못하므로
parcel이 컴파일하여 dist 생성함

tsconfig.json 추가 작성
esModuleInterop ESM과 Commonjs 

파슬 번들러가 js로 컴파일해줌 -> dist 폴더의 index.html은 ts로 연결된 것이 아니라 js로 연결되어 있음

타입스크립트로 배열 선언시
객체
// typeof DATA === "object"
const obj: object = {}
const arr: object = []
const func: object = function () {}
모두 오브젝트로 나타나므로
오브젝트 타입은 엄격하지 않을 수밖에 없음

그러므로
const userA {
  name: string
  age:number
  isValid: bollean
} = {
  name: "김철수",
  age: 85,
  isValid: true
}
const userB {
  name: string
  age:number
  isValid: bollean
} = 
와 같은 형식으로 객체 데이터에 데이터 타입을 지정하고 할당 연산자로 값을 명시 함

반복되는 객체는 interface로 제작 재사용 이 가능함
interface User {
  name: string
  age:number
  isValid: bollean
}
const userA: User {
  name: "김철수",
  age: 85,
  isValid: true
}
const userB: User {
  name: "Neo",
  age: 22,
  isValid: false
}
와 같이 할당 할 수 있음 but 속성을 추가 할 수 없음 User로 데이터 형식이 유지 됨
interface는 대문자로 시작하여 구분시킴 객체 데이터를 만들 때는
interface를 만들어 사용

함수 화살표 다음의 number는 return 값의 타입을 명시하는 것
const add: (x: number, y:number) => number = function (x, y) {
  return x + y
}
const a: number = add(1, 2)

or

const add: (x: number, y:number) => number 
= function (x: number, y:number): number {
   return x + y
}
const a: number = add(1, 2)


//리턴 값이 없으면 undefined가 반환됨 js에서는
but ts에서는 void가 반환 됨

const hello: () => void = function () {
  console.log("hello world")
}
const h: void = hello()

or

const hello = function (): void {
  console.log("hello world")
}
const h: void = hello()

//any 어떠한 타입도 가능 에러 발생 X 사실상 타입스크립트 사용 무의미
되도록 사용하지 않는 것이 ts 사용 목적에 맞음
let hello: any = "hello world"

Unknown 일단은 타입 선정 보류
const a: any = 123
const u: unknown =123

//모두 오류 발생 x
const any: any = a
const boo: boolean = a
const num: number = a
const arr: string[] = a
const obj: {x: string, y: number} = a

//첫번째 코드만 제외하고 모두 오류 발생 any를 제외하면 unknown이라는 타입 자체가 지정되어 있으므로 모두 오류 발생하게 됨 any보다 엄격하게 unkwnon을 관리 할 수 있음
const any: any = u
const boo: boolean = u
const num: number = u
const arr: string[] = u
const obj: {x: string, y: number} = u

//Tuple tuple의 경우 2가 추가 되었을 때 최대 아이템의 개수 까지 제한함
//tuple의 경우 배열의 각각 값에 대한 타입이 지정되어 있고 순서 또한 중요
const tuple: [string, number, boolean] = ["a", 1, false]
const users: [string, number, boolean] = ["a", 1, false][] = [
  [1, "neo", true], [2, "eva", false], [3, "ella", false]
]

//void return 없는 함수에 대한 반환 이경우 function은 void여야 함
function hello(msg: string): void {
  console.log("hello" $(msg))
}
const hi: void = hello("world");

//never 일반적으로 쓰일 일 없음 선언에[never]가 생략되어 있음 그러므로배열 타입을 반드시 선언해주어야 함 (에러에서 never가 발생한다면 타입지정을 확인해봐야 함)
const nev: [] = []
nev.push(3) -> 에러 

//union 배열데이터
let union: (string | number) []
union = "hello"
union = 123
union = false error발생 boolean 타입은 할당되어 있지 않음

//intersection
interface User{
  name: string,
  age: number
}
interface Validation {
  isValid boolean
}
//상기 2개의 타입 모두 지정된 구조여야 함
const heropy: User & Validation = {
  name: "neo",
  age: 85,
  isValid: true
}
